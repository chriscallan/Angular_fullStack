import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Params, ActivatedRoute } from '@angular/router';
import { Feedback, ContactType } from '../shared/feedback';
import { visibility, flyInOut, expand } from '../animations/app.animation';
import { FeedbackService } from '../services/feedback.service';

@Component({
  selector: 'app-contact',
  templateUrl: './contact.component.html',
  styleUrls: ['./contact.component.scss'], 
  host: {
    '[@flyInOut]': 'true', 
    'style': 'display: block;'
  }, 
  animations: [
    visibility(), 
    flyInOut(), 
    expand()
  ]
})

export class ContactComponent implements OnInit {

  feedbackForm: FormGroup; 
  feedback: Feedback; 
  feedbackCopy: Feedback; 
  contactType = ContactType; 
  formVis = 'shown';
  spinnerVis = 'hidden'; 
  feedbackVis = 'hidden';
  errMess: string; 
  myResponse: any; 

  constructor(private fb: FormBuilder, 
    private feedbackService: FeedbackService, 
    private route: ActivatedRoute) {
    this.createForm(); 
   }

  ngOnInit() {
  }

  formErrors = {
    'firstname': '',
    'lastname': '',
    'telnum': '',
    'email': ''
  };

  validationMessages = {
    'firstname': {
      'required': 'First Name is required.',
      'minlength': 'First Name must be at least 2 characters long.',
      'maxlength': 'FirstName cannot be more than 25 characters long.'
    },
    'lastname': {
      'required': 'Last Name is required.',
      'minlength': 'Last Name must be at least 2 characters long.',
      'maxlength': 'Last Name cannot be more than 25 characters long.'
    },
    'telnum': {
      'required': 'Tel. number is required.',
      'pattern': 'Tel. number must contain only numbers.'
    },
    'email': {
      'required': 'Email is required.',
      'email': 'Email not in valid format.'
    },
  };

  createForm(): void {
    this.feedbackForm = this.fb.group({
      firstname: ['test', [Validators.required, Validators.minLength(2), Validators.maxLength(25)] ],
      lastname: ['test', [Validators.required, Validators.minLength(2), Validators.maxLength(25)] ],
      telnum: ['1234', [Validators.required, Validators.pattern] ],
      email: ['test@test.net', [Validators.required, Validators.email] ],
      agree: true,
      contacttype: 'Tel',
      message: 'this is yet another message #'
    });
    this.feedbackForm.valueChanges.subscribe(data => this.onValueChanged(data));

    this.onValueChanged(); // (re)set validation messages now
  }

  onSubmit() {
    this.feedback = this.feedbackForm.value;
    this.feedbackCopy = this.feedback; 
    this.formVis = 'hidden'; 
    this.spinnerVis = 'shown';
    setTimeout(() => {
      this.feedbackService.submitFeedback(this.feedbackCopy)
        .subscribe((feedback: Feedback) => { this.feedback = feedback; this.feedbackCopy = feedback;
          this.feedbackVis = 'shown'; this.spinnerVis = 'hidden';  });
    }, 2000);
    setTimeout(() => {}, 5000); 
    setTimeout(() => { this.formVis = 'shown'; 
    this.spinnerVis = 'hidden'; this.feedbackVis = 'hidden';}, 5000);
     
    this.feedbackForm.reset({
      firstname: '',
      lastname: '',
      telnum: '',
      email: '',
      agree: false,
      contacttype: 'None',
      message: ''
    }); 
  }

  onValueChanged(data?: any) {
    if (!this.feedbackForm) { return; }
    const form = this.feedbackForm;
    for (const field in this.formErrors) {
      // clear previous error message (if any)
      this.formErrors[field] = '';
      const control = form.get(field);
      if (control && control.dirty && !control.valid) {
        const messages = this.validationMessages[field];
        for (const key in control.errors) {
          this.formErrors[field] += messages[key] + ' ';
        }
      }
    }
  }
}
